! function(t, e, i) { var n, r = "JSGrid",
        s = "asc",
        a = function(t, i) { return e.isFunction(t) ? t.apply(i, e.makeArray(arguments).slice(2)) : t },
        o = { loadData: e.noop, insertItem: e.noop, updateItem: e.noop, deleteItem: e.noop };

    function l(t, i) { var n = e(t);
        n.data(r, this), this._container = n, this.data = [], this.fields = [], this._editingRow = null, this._sortField = null, this._sortOrder = s, this._firstDisplayingPage = 1, this._init(i), this.render() }
    l.prototype = { width: "auto", height: "auto", updateOnResize: !0, rowClass: e.noop, rowRenderer: null, rowClick: function(t) { this.editing && this.editItem(e(t.event.target).closest("tr")) }, rowDoubleClick: e.noop, noDataContent: "Not found", noDataRowClass: "jsgrid-nodata-row", heading: !0, headerRowRenderer: null, headerRowClass: "jsgrid-header-row", headerCellClass: "jsgrid-header-cell", filtering: !1, filterRowRenderer: null, filterRowClass: "jsgrid-filter-row", inserting: !1, insertRowRenderer: null, insertRowClass: "jsgrid-insert-row", editing: !1, editRowRenderer: null, editRowClass: "jsgrid-edit-row", confirmDeleting: !0, deleteConfirm: "Are you sure?", selecting: !0, selectedRowClass: "jsgrid-selected-row", oddRowClass: "jsgrid-row", evenRowClass: "jsgrid-alt-row", cellClass: "jsgrid-cell", sorting: !1, sortableClass: "jsgrid-header-sortable", sortAscClass: "jsgrid-header-sort jsgrid-header-sort-asc", sortDescClass: "jsgrid-header-sort jsgrid-header-sort-desc", paging: !1, pagerContainer: null, pageIndex: 1, pageSize: 10, pageButtonCount: 15, pagerFormat: "Trang: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} trên {pageCount}", pagePrevText: "Sau", pageNextText: "Trước", pageFirstText: "Đầu", pageLastText: "Cuối", pageNavigatorNextText: "...", pageNavigatorPrevText: "...", pagerContainerClass: "jsgrid-pager-container", pagerClass: "jsgrid-pager", pagerNavButtonClass: "jsgrid-pager-nav-button", pagerNavButtonInactiveClass: "jsgrid-pager-nav-inactive-button", pageClass: "jsgrid-pager-page", currentPageClass: "jsgrid-pager-current-page", customLoading: !1, pageLoading: !1, autoload: !1, controller: o, loadIndication: !0, loadIndicationDelay: 500, loadMessage: "Please, wait...", loadShading: !0, invalidMessage: "Invalid data entered!", invalidNotify: function(i) { var n = e.map(i.errors, function(t) { return t.message || null });
            t.alert([this.invalidMessage].concat(n).join("\n")) }, onInit: e.noop, onRefreshing: e.noop, onRefreshed: e.noop, onPageChanged: e.noop, onItemDeleting: e.noop, onItemDeleted: e.noop, onItemInserting: e.noop, onItemInserted: e.noop, onItemEditing: e.noop, onItemUpdating: e.noop, onItemUpdated: e.noop, onItemInvalid: e.noop, onDataLoading: e.noop, onDataLoaded: e.noop, onOptionChanging: e.noop, onOptionChanged: e.noop, onError: e.noop, invalidClass: "jsgrid-invalid", containerClass: "jsgrid", tableClass: "jsgrid-table", gridHeaderClass: "jsgrid-grid-header", gridBodyClass: "jsgrid-grid-body", _init: function(t) { e.extend(this, t), this._initLoadStrategy(), this._initController(), this._initFields(), this._attachWindowLoadResize(), this._attachWindowResizeCallback(), this._callEventHandler(this.onInit) }, loadStrategy: function() { return this.pageLoading ? new jsGrid.loadStrategies.PageLoadingStrategy(this) : new jsGrid.loadStrategies.DirectLoadingStrategy(this) }, _initLoadStrategy: function() { this._loadStrategy = a(this.loadStrategy, this) }, _initController: function() { this._controller = e.extend({}, o, a(this.controller, this)) }, renderTemplate: function(t, e, i) { for (var n in args = [], i) args.push(i[n]); return args.unshift(t, e), null == (t = a.apply(null, args)) ? "" : t }, loadIndicator: function(t) { return new jsGrid.LoadIndicator(t) }, validation: function(t) { return jsGrid.Validation && new jsGrid.Validation(t) }, _initFields: function() { var t = this;
            t.fields = e.map(t.fields, function(i) { e.isPlainObject(i) && (i = new(i.type && jsGrid.fields[i.type] || jsGrid.Field)(i)); return i._grid = t, i }) }, _attachWindowLoadResize: function() { e(t).on("load", e.proxy(this._refreshSize, this)) }, _attachWindowResizeCallback: function() { this.updateOnResize && e(t).on("resize", e.proxy(this._refreshSize, this)) }, _detachWindowResizeCallback: function() { e(t).off("resize", this._refreshSize) }, option: function(t, e) { var i, n; if (1 === arguments.length) return this[t];
            i = { option: t, oldValue: this[t], newValue: e }, this._callEventHandler(this.onOptionChanging, i), this._handleOptionChange(i.option, i.newValue), n = { option: i.option, value: i.newValue }, this._callEventHandler(this.onOptionChanged, n) }, fieldOption: function(t, e, i) { if (t = this._normalizeField(t), 2 === arguments.length) return t[e];
            t[e] = i, this._renderGrid() }, _handleOptionChange: function(t, e) { switch (this[t] = e, t) {
                case "width":
                case "height":
                    this._refreshSize(); break;
                case "rowClass":
                case "rowRenderer":
                case "rowClick":
                case "rowDoubleClick":
                case "noDataRowClass":
                case "noDataContent":
                case "selecting":
                case "selectedRowClass":
                case "oddRowClass":
                case "evenRowClass":
                    this._refreshContent(); break;
                case "pageButtonCount":
                case "pagerFormat":
                case "pagePrevText":
                case "pageNextText":
                case "pageFirstText":
                case "pageLastText":
                case "pageNavigatorNextText":
                case "pageNavigatorPrevText":
                case "pagerClass":
                case "pagerNavButtonClass":
                case "pageClass":
                case "currentPageClass":
                case "pagerRenderer":
                    this._refreshPager(); break;
                case "fields":
                    this._initFields(), this.render(); break;
                case "data":
                case "editing":
                case "heading":
                case "filtering":
                case "inserting":
                case "paging":
                    this.refresh(); break;
                case "loadStrategy":
                case "pageLoading":
                    this._initLoadStrategy(), this.search(); break;
                case "pageIndex":
                    this.openPage(e); break;
                case "pageSize":
                    this.refresh(), this.search(); break;
                case "editRowRenderer":
                case "editRowClass":
                    this.cancelEdit(); break;
                case "updateOnResize":
                    this._detachWindowResizeCallback(), this._attachWindowResizeCallback(); break;
                case "invalidNotify":
                case "invalidMessage":
                    break;
                default:
                    this.render() } }, destroy: function() { this._detachWindowResizeCallback(), this._clear(), this._container.removeData(r) }, render: function() { return this._renderGrid(), this.autoload ? this.loadData() : e.Deferred().resolve().promise() }, _renderGrid: function() { this._clear(), this._container.addClass(this.containerClass).css("position", "relative").append(this._createHeader()).append(this._createBody()), this._pagerContainer = this._createPagerContainer(), this._loadIndicator = this._createLoadIndicator(), this._validation = this._createValidation(), this.refresh() }, _createLoadIndicator: function() { return a(this.loadIndicator, this, { message: this.loadMessage, shading: this.loadShading, container: this._container }) }, _createValidation: function() { return a(this.validation, this) }, _clear: function() { this.cancelEdit(), clearTimeout(this._loadingTimer), this._pagerContainer && this._pagerContainer.empty(), this._container.empty().css({ position: "", width: "", height: "" }) }, _createHeader: function() { var t = this._headerRow = this._createHeaderRow(),
                i = this._filterRow = this._createFilterRow(),
                n = this._insertRow = this._createInsertRow(),
                r = this._headerGrid = e("<table>").addClass(this.tableClass).append(t).append(i).append(n); return this._header = e("<div>").addClass(this.gridHeaderClass).addClass(this._scrollBarWidth() ? "jsgrid-header-scrollbar" : "").append(r) }, _createBody: function() { var t = this._content = e("<tbody>"),
                i = this._bodyGrid = e("<table>").addClass(this.tableClass).append(t); return this._body = e("<div>").addClass(this.gridBodyClass).append(i).on("scroll", e.proxy(function(t) { this._header.scrollLeft(t.target.scrollLeft) }, this)) }, _createPagerContainer: function() { var t = this.pagerContainer || e("<div>").appendTo(this._container); return e(t).addClass(this.pagerContainerClass) }, _eachField: function(t) { var i = this;
            e.each(this.fields, function(e, n) { n.visible && t.call(i, n, e) }) }, _createHeaderRow: function() { if (e.isFunction(this.headerRowRenderer)) return e(this.renderTemplate(this.headerRowRenderer, this)); var t = e("<tr>").addClass(this.headerRowClass); return this._eachField(function(i, n) { var r = this._prepareCell("<th>", i, "headercss", this.headerCellClass).append(this.renderTemplate(i.headerTemplate, i)).appendTo(t);
                this.sorting && i.sorting && r.addClass(this.sortableClass).on("click", e.proxy(function() { this.sort(n) }, this)) }), t }, _prepareCell: function(t, i, n, r) { return e(t).css("width", i.width).addClass(r || this.cellClass).addClass(n && i[n] || i.css).addClass(i.align ? "jsgrid-align-" + i.align : "") }, _createFilterRow: function() { if (e.isFunction(this.filterRowRenderer)) return e(this.renderTemplate(this.filterRowRenderer, this)); var t = e("<tr>").addClass(this.filterRowClass); return this._eachField(function(e) { this._prepareCell("<td>", e, "filtercss").append(this.renderTemplate(e.filterTemplate, e)).appendTo(t) }), t }, _createInsertRow: function() { if (e.isFunction(this.insertRowRenderer)) return e(this.renderTemplate(this.insertRowRenderer, this)); var t = e("<tr>").addClass(this.insertRowClass); return this._eachField(function(e) { this._prepareCell("<td>", e, "insertcss").append(this.renderTemplate(e.insertTemplate, e)).appendTo(t) }), t }, _callEventHandler: function(t, i) { return t.call(this, e.extend(i, { grid: this })), i }, reset: function() { return this._resetSorting(), this._resetPager(), this._loadStrategy.reset() }, _resetPager: function() { this._firstDisplayingPage = 1, this._setPage(1) }, _resetSorting: function() { this._sortField = null, this._sortOrder = s, this._clearSortingCss() }, refresh: function() { this._callEventHandler(this.onRefreshing), this.cancelEdit(), this._refreshHeading(), this._refreshFiltering(), this._refreshInserting(), this._refreshContent(), this._refreshPager(), this._refreshSize(), this._callEventHandler(this.onRefreshed) }, _refreshHeading: function() { this._headerRow.toggle(this.heading) }, _refreshFiltering: function() { this._filterRow.toggle(this.filtering) }, _refreshInserting: function() { this._insertRow.toggle(this.inserting) }, _refreshContent: function() { var t = this._content; if (t.empty(), !this.data.length) return t.append(this._createNoDataRow()), this; for (var e = this._loadStrategy.firstDisplayIndex(), i = this._loadStrategy.lastDisplayIndex(), n = e; n < i; n++) { var r = this.data[n];
                t.append(this._createRow(r, n)) } }, _createNoDataRow: function() { var t = 0; return this._eachField(function() { t++ }), e("<tr>").addClass(this.noDataRowClass).append(e("<td>").addClass(this.cellClass).attr("colspan", t).append(this.renderTemplate(this.noDataContent, this))) }, _createRow: function(t, i) { var n; return e.isFunction(this.rowRenderer) ? n = this.renderTemplate(this.rowRenderer, this, { item: t, itemIndex: i }) : (n = e("<tr>"), this._renderCells(n, t)), n.addClass(this._getRowClasses(t, i)).data("JSGridItem", t).on("click", e.proxy(function(e) { this.rowClick({ item: t, itemIndex: i, event: e }) }, this)).on("dblclick", e.proxy(function(e) { this.rowDoubleClick({ item: t, itemIndex: i, event: e }) }, this)), this.selecting && this._attachRowHover(n), n }, _getRowClasses: function(t, e) { var i = []; return i.push((e + 1) % 2 ? this.oddRowClass : this.evenRowClass), i.push(a(this.rowClass, this, t, e)), i.join(" ") }, _attachRowHover: function(t) { var i = this.selectedRowClass;
            t.hover(function() { e(this).addClass(i) }, function() { e(this).removeClass(i) }) }, _renderCells: function(t, e) { return this._eachField(function(i) { t.append(this._createCell(e, i)) }), this }, _createCell: function(t, i) { var n, r = this._getItemFieldValue(t, i),
                s = { value: r, item: t }; return n = e.isFunction(i.cellRenderer) ? this.renderTemplate(i.cellRenderer, i, s) : e("<td>").append(this.renderTemplate(i.itemTemplate || r, i, s)), this._prepareCell(n, i) }, _getItemFieldValue: function(t, e) { for (var i = e.name.split("."), n = t[i.shift()]; n && i.length;) n = n[i.shift()]; return n }, _setItemFieldValue: function(t, e, i) { for (var n = e.name.split("."), r = t, s = n[0]; r && n.length;) r = (t = r)[s = n.shift()]; if (!r)
                for (; n.length;) t = t[s] = {}, s = n.shift();
            t[s] = i }, sort: function(t, i) { return e.isPlainObject(t) && (i = t.order, t = t.field), this._clearSortingCss(), this._setSortingParams(t, i), this._setSortingCss(), this._loadStrategy.sort() }, _clearSortingCss: function() { this._headerRow.find("th").removeClass(this.sortAscClass).removeClass(this.sortDescClass) }, _setSortingParams: function(t, e) { t = this._normalizeField(t), e = e || (this._sortField === t ? this._reversedSortOrder(this._sortOrder) : s), this._sortField = t, this._sortOrder = e }, _normalizeField: function(t) { return e.isNumeric(t) ? this.fields[t] : "string" == typeof t ? e.grep(this.fields, function(e) { return e.name === t })[0] : t }, _reversedSortOrder: function(t) { return t === s ? "desc" : s }, _setSortingCss: function() { var t = this._visibleFieldIndex(this._sortField);
            this._headerRow.find("th").eq(t).addClass(this._sortOrder === s ? this.sortAscClass : this.sortDescClass) }, _visibleFieldIndex: function(t) { return e.inArray(t, e.grep(this.fields, function(t) { return t.visible })) }, _sortData: function() { var t = this._sortFactor(),
                e = this._sortField;
            e && this.data.sort(function(i, n) { return t * e.sortingFunc(i[e.name], n[e.name]) }) }, _sortFactor: function() { return this._sortOrder === s ? 1 : -1 }, _itemsCount: function() { return this._loadStrategy.itemsCount() }, _pagesCount: function() { var t = this._itemsCount(),
                e = this.pageSize; return Math.floor(t / e) + (t % e ? 1 : 0) }, _refreshPager: function() { var t = this._pagerContainer;
            t.empty(), this.paging && t.append(this._createPager()); var e = this.paging && this._pagesCount() > 1;
            t.toggle(e) }, _createPager: function() { var t; return (t = e.isFunction(this.pagerRenderer) ? e(this.pagerRenderer({ pageIndex: this.pageIndex, pageCount: this._pagesCount() })) : e("<div>").append(this._createPagerByFormat())).addClass(this.pagerClass), t }, _createPagerByFormat: function() { var t = this.pageIndex,
                i = this._pagesCount(),
                n = this._itemsCount(),
                r = this.pagerFormat.split(" "); return e.map(r, e.proxy(function(r) { var s = r; return "{pages}" === r ? s = this._createPages() : "{first}" === r ? s = this._createPagerNavButton(this.pageFirstText, 1, t > 1) : "{prev}" === r ? s = this._createPagerNavButton(this.pagePrevText, t - 1, t > 1) : "{next}" === r ? s = this._createPagerNavButton(this.pageNextText, t + 1, t < i) : "{last}" === r ? s = this._createPagerNavButton(this.pageLastText, i, t < i) : "{pageIndex}" === r ? s = t : "{pageCount}" === r ? s = i : "{itemCount}" === r && (s = n), e.isArray(s) ? s.concat([" "]) : [s, " "] }, this)) }, _createPages: function() { var t = this._pagesCount(),
                e = this.pageButtonCount,
                i = this._firstDisplayingPage,
                n = [];
            i > 1 && n.push(this._createPagerPageNavButton(this.pageNavigatorPrevText, this.showPrevPages)); for (var r = 0, s = i; r < e && s <= t; r++, s++) n.push(s === this.pageIndex ? this._createPagerCurrentPage() : this._createPagerPage(s)); return i + e - 1 < t && n.push(this._createPagerPageNavButton(this.pageNavigatorNextText, this.showNextPages)), n }, _createPagerNavButton: function(t, i, n) { return this._createPagerButton(t, this.pagerNavButtonClass + (n ? "" : " " + this.pagerNavButtonInactiveClass), n ? function() { this.openPage(i) } : e.noop) }, _createPagerPageNavButton: function(t, e) { return this._createPagerButton(t, this.pagerNavButtonClass, e) }, _createPagerPage: function(t) { return this._createPagerButton(t, this.pageClass, function() { this.openPage(t) }) }, _createPagerButton: function(t, i, n) { var r = e("<a>").attr("href", "javascript:void(0);").html(t).on("click", e.proxy(n, this)); return e("<span>").addClass(i).append(r) }, _createPagerCurrentPage: function() { return e("<span>").addClass(this.pageClass).addClass(this.currentPageClass).text(this.pageIndex) }, _refreshSize: function() { this._refreshHeight(), this._refreshWidth() }, _refreshWidth: function() { var t = "auto" === this.width ? this._getAutoWidth() : this.width;
            this._container.width(t) }, _getAutoWidth: function() { var t = this._headerGrid,
                e = this._header;
            t.width("auto"); var i = t.outerWidth(),
                n = e.outerWidth() - e.innerWidth(); return t.width(""), i + n }, _scrollBarWidth: function() { if (void 0 === n) { var t = e("<div style='width:50px;height:50px;overflow:hidden;position:absolute;top:-10000px;left:-10000px;'></div>"),
                    i = e("<div style='height:100px;'></div>");
                t.append(i).appendTo("body"); var r = i.innerWidth();
                t.css("overflow-y", "auto"); var s = i.innerWidth();
                t.remove(), n = r - s } return n }, _refreshHeight: function() { var t, e = this._container,
                i = this._pagerContainer,
                n = this.height;
            e.height(n), "auto" !== n && (n = e.height(), t = this._header.outerHeight(!0), i.parents(e).length && (t += i.outerHeight(!0)), this._body.outerHeight(n - t)) }, showPrevPages: function() { var t = this._firstDisplayingPage,
                e = this.pageButtonCount;
            this._firstDisplayingPage = t > e ? t - e : 1, this._refreshPager() }, showNextPages: function() { var t = this._firstDisplayingPage,
                e = this.pageButtonCount,
                i = this._pagesCount();
            this._firstDisplayingPage = t + 2 * e > i ? i - e + 1 : t + e, this._refreshPager() }, openPage: function(t) { t < 1 || t > this._pagesCount() || (this._setPage(t), this._loadStrategy.openPage(t)) }, _setPage: function(t) { var e = this._firstDisplayingPage,
                i = this.pageButtonCount;
            this.pageIndex = t, t < e && (this._firstDisplayingPage = t), t > e + i - 1 && (this._firstDisplayingPage = t - i + 1), this._callEventHandler(this.onPageChanged, { pageIndex: t }) }, _controllerCall: function(t, i, n, r) { if (n) return e.Deferred().reject().promise();
            this._showLoading(); var s, a, o = this._controller; if (!o || !o[t]) throw Error("controller has no method '" + t + "'"); return (s = o[t](i), a = e.Deferred(), s && s.then ? s.then(function() { a.resolve.apply(a, arguments) }, function() { a.reject.apply(a, arguments) }) : a.resolve(s), a.promise()).done(e.proxy(r, this)).fail(e.proxy(this._errorHandler, this)).always(e.proxy(this._hideLoading, this)) }, _errorHandler: function() { this._callEventHandler(this.onError, { args: e.makeArray(arguments) }) }, _showLoading: function() { this.loadIndication && (clearTimeout(this._loadingTimer), this._loadingTimer = setTimeout(e.proxy(function() { this._loadIndicator.show() }, this), this.loadIndicationDelay)) }, _hideLoading: function() { this.loadIndication && (clearTimeout(this._loadingTimer), this._loadIndicator.hide()) }, search: function(t) { return this._resetSorting(), this._resetPager(), this.loadData(t) }, loadData: function(t) { t = t || (this.filtering ? this.getFilter() : {}), e.extend(t, this._loadStrategy.loadParams(), this._sortingParams()); var i = this._callEventHandler(this.onDataLoading, { filter: t }); return this._controllerCall("loadData", t, i.cancel, function(t) { t && (this._loadStrategy.finishLoad(t), this._callEventHandler(this.onDataLoaded, { data: t })) }) }, getFilter: function() { var t = {}; return this._eachField(function(e) { e.filtering && this._setItemFieldValue(t, e, e.filterValue()) }), t }, _sortingParams: function() { return this.sorting && this._sortField ? { sortField: this._sortField.name, sortOrder: this._sortOrder } : {} }, getSorting: function() { var t = this._sortingParams(); return { field: t.sortField, order: t.sortOrder } }, clearFilter: function() { var t = this._createFilterRow(); return this._filterRow.replaceWith(t), this._filterRow = t, this.search() }, insertItem: function(t) { var i = t || this._getValidatedInsertItem(); if (!i) return e.Deferred().reject().promise(); var n = this._callEventHandler(this.onItemInserting, { item: i }); return this._controllerCall("insertItem", i, n.cancel, function(t) { t = t || i, this._loadStrategy.finishInsert(t), this._callEventHandler(this.onItemInserted, { item: t }) }) }, _getValidatedInsertItem: function() { var t = this._getInsertItem(); return this._validateItem(t, this._insertRow) ? t : null }, _getInsertItem: function() { var t = {}; return this._eachField(function(e) { e.inserting && this._setItemFieldValue(t, e, e.insertValue()) }), t }, _validateItem: function(t, i) { var n = [],
                r = { item: t, itemIndex: this._rowIndex(i), row: i }; if (this._eachField(function(s) { if (s.validate && (i !== this._insertRow || s.inserting) && (i !== this._getEditRow() || s.editing)) { var a = this._getItemFieldValue(t, s),
                            o = this._validation.validate(e.extend({ value: a, rules: s.validate }, r));
                        this._setCellValidity(i.children().eq(this._visibleFieldIndex(s)), o), o.length && n.push.apply(n, e.map(o, function(t) { return { field: s, message: t } })) } }), !n.length) return !0; var s = e.extend({ errors: n }, r); return this._callEventHandler(this.onItemInvalid, s), this.invalidNotify(s), !1 }, _setCellValidity: function(t, e) { t.toggleClass(this.invalidClass, !!e.length).attr("title", e.join("\n")) }, clearInsert: function() { var t = this._createInsertRow();
            this._insertRow.replaceWith(t), this._insertRow = t, this.refresh() }, editItem: function(t) { var e = this.rowByItem(t);
            e.length && this._editRow(e) }, rowByItem: function(t) { return t.jquery || t.nodeType ? e(t) : this._content.find("tr").filter(function() { return e.data(this, "JSGridItem") === t }) }, _editRow: function(t) { if (this.editing) { var e = t.data("JSGridItem"); if (!this._callEventHandler(this.onItemEditing, { row: t, item: e, itemIndex: this._itemIndex(e) }).cancel) { this._editingRow && this.cancelEdit(); var i = this._createEditRow(e);
                    this._editingRow = t, t.hide(), i.insertBefore(t), t.data("JSGridEditRow", i) } } }, _createEditRow: function(t) { if (e.isFunction(this.editRowRenderer)) return e(this.renderTemplate(this.editRowRenderer, this, { item: t, itemIndex: this._itemIndex(t) })); var i = e("<tr>").addClass(this.editRowClass); return this._eachField(function(e) { var n = this._getItemFieldValue(t, e);
                this._prepareCell("<td>", e, "editcss").append(this.renderTemplate(e.editTemplate || "", e, { value: n, item: t })).appendTo(i) }), i }, updateItem: function(t, e) { 1 === arguments.length && (e = t); var i = t ? this.rowByItem(t) : this._editingRow; if (e = e || this._getValidatedEditedItem()) return this._updateRow(i, e) }, _getValidatedEditedItem: function() { var t = this._getEditedItem(); return this._validateItem(t, this._getEditRow()) ? t : null }, _updateRow: function(t, i) { var n = t.data("JSGridItem"),
                r = this._itemIndex(n),
                s = e.extend(!0, {}, n, i),
                a = this._callEventHandler(this.onItemUpdating, { row: t, item: s, itemIndex: r, previousItem: n }); return this._controllerCall("updateItem", s, a.cancel, function(a) { var o = e.extend(!0, {}, n);
                s = a || e.extend(!0, n, i); var l = this._finishUpdate(t, s, r);
                this._callEventHandler(this.onItemUpdated, { row: l, item: s, itemIndex: r, previousItem: o }) }) }, _rowIndex: function(t) { return this._content.children().index(e(t)) }, _itemIndex: function(t) { return e.inArray(t, this.data) }, _finishUpdate: function(t, e, i) { this.cancelEdit(), this.data[i] = e; var n = this._createRow(e, i); return t.replaceWith(n), n }, _getEditedItem: function() { var t = {}; return this._eachField(function(e) { e.editing && this._setItemFieldValue(t, e, e.editValue()) }), t }, cancelEdit: function() { this._editingRow && (this._getEditRow().remove(), this._editingRow.show(), this._editingRow = null) }, _getEditRow: function() { return this._editingRow && this._editingRow.data("JSGridEditRow") }, deleteItem: function(e) { var i = this.rowByItem(e); if (i.length && (!this.confirmDeleting || t.confirm(a(this.deleteConfirm, this, i.data("JSGridItem"))))) return this._deleteRow(i) }, _deleteRow: function(t) { var e = t.data("JSGridItem"),
                i = this._itemIndex(e),
                n = this._callEventHandler(this.onItemDeleting, { row: t, item: e, itemIndex: i }); return this._controllerCall("deleteItem", e, n.cancel, function() { this._loadStrategy.finishDelete(e, i), this._callEventHandler(this.onItemDeleted, { row: t, item: e, itemIndex: i }) }) } }, e.fn.jsGrid = function(t) { var i = e.makeArray(arguments).slice(1),
            n = this; return this.each(function() { var s, a = e(this),
                o = a.data(r); if (o)
                if ("string" == typeof t) { if (void 0 !== (s = o[t].apply(o, i)) && s !== o) return n = s, !1 } else o._detachWindowResizeCallback(), o._init(t), o.render();
            else new l(a, t) }), n }; var d = {},
        h = {},
        u = function(t, i) { e.each(i, function(i, n) { e.isPlainObject(n) ? u(t[i] || t[i[0].toUpperCase() + i.slice(1)], n) : t.hasOwnProperty(i) ? t[i] = n : t.prototype[i] = n }) };
    t.jsGrid = { Grid: l, fields: d, setDefaults: function(t) { var i;
            e.isPlainObject(t) ? i = l.prototype : (i = d[t].prototype, t = arguments[1] || {}), e.extend(i, t) }, locales: h, locale: function(t) { var i = e.isPlainObject(t) ? t : h[t]; if (!i) throw Error("unknown locale " + t);
            u(jsGrid, i) }, version: "1.5.3" } }(window, jQuery),
function(t, e, i) {
    function n(t) { this._init(t) }
    n.prototype = { container: "body", message: "Loading...", shading: !0, zIndex: 1e3, shaderClass: "jsgrid-load-shader", loadPanelClass: "jsgrid-load-panel", _init: function(t) { e.extend(!0, this, t), this._initContainer(), this._initShader(), this._initLoadPanel() }, _initContainer: function() { this._container = e(this.container) }, _initShader: function() { this.shading && (this._shader = e("<div>").addClass(this.shaderClass).hide().css({ position: "absolute", top: 0, right: 0, bottom: 0, left: 0, zIndex: this.zIndex }).appendTo(this._container)) }, _initLoadPanel: function() { this._loadPanel = e("<div>").addClass(this.loadPanelClass).text(this.message).hide().css({ position: "absolute", top: "50%", left: "50%", zIndex: this.zIndex }).appendTo(this._container) }, show: function() { var t = this._loadPanel.show(),
                e = t.outerWidth(),
                i = t.outerHeight();
            t.css({ marginTop: -i / 2, marginLeft: -e / 2 }), this._shader.show() }, hide: function() { this._loadPanel.hide(), this._shader.hide() } }, t.LoadIndicator = n }(jsGrid, jQuery),
function(t, e, i) {
    function n(t) { this._grid = t }

    function r(t) { this._grid = t, this._itemsCount = 0 }
    n.prototype = { firstDisplayIndex: function() { var t = this._grid; return t.option("paging") ? (t.option("pageIndex") - 1) * t.option("pageSize") : 0 }, lastDisplayIndex: function() { var t = this._grid,
                e = t.option("data").length; return t.option("paging") ? Math.min(t.option("pageIndex") * t.option("pageSize"), e) : e }, itemsCount: function() { return this._grid.option("data").length }, openPage: function(t) { this._grid.refresh() }, loadParams: function() { return {} }, sort: function() { return this._grid._sortData(), this._grid.refresh(), e.Deferred().resolve().promise() }, reset: function() { return this._grid.refresh(), e.Deferred().resolve().promise() }, finishLoad: function(t) { this._grid.option("data", t) }, finishInsert: function(t) { var e = this._grid;
            e.option("data").push(t), e.refresh() }, finishDelete: function(t, e) { var i = this._grid;
            i.option("data").splice(e, 1), i.reset() } }, r.prototype = { firstDisplayIndex: function() { return 0 }, lastDisplayIndex: function() { return this._grid.option("data").length }, itemsCount: function() { return this._itemsCount }, openPage: function(t) { this._grid.loadData() }, loadParams: function() { var t = this._grid; return { pageIndex: t.option("pageIndex"), pageSize: t.option("pageSize") } }, reset: function() { return this._grid.loadData() }, sort: function() { return this._grid.loadData() }, finishLoad: function(t) { this._itemsCount = t.itemsCount, this._grid.option("data", t.data) }, finishInsert: function(t) { this._grid.search() }, finishDelete: function(t, e) { this._grid.search() } }, t.loadStrategies = { DirectLoadingStrategy: n, PageLoadingStrategy: r } }(jsGrid, jQuery),
function(t, e, i) { var n = function(t) { return null != t },
        r = { string: function(t, e) { return n(t) || n(e) ? n(t) ? n(e) ? ("" + t).localeCompare("" + e) : 1 : -1 : 0 }, number: function(t, e) { return t - e }, date: function(t, e) { return t - e }, numberAsString: function(t, e) { return parseFloat(t) - parseFloat(e) } };
    t.sortStrategies = r }(jsGrid, jQuery),
function(t, e, i) {
    function n(t) { this._init(t) }
    n.prototype = { _init: function(t) { e.extend(!0, this, t) }, validate: function(t) { var i = []; return e.each(this._normalizeRules(t.rules), function(n, r) { if (!r.validator(t.value, t.item, r.param)) { var s = e.isFunction(r.message) ? r.message(t.value, t.item) : r.message;
                    i.push(s) } }), i }, _normalizeRules: function(t) { return e.isArray(t) || (t = [t]), e.map(t, e.proxy(function(t) { return this._normalizeRule(t) }, this)) }, _normalizeRule: function(t) { if ("string" == typeof t && (t = { validator: t }), e.isFunction(t) && (t = { validator: t }), !e.isPlainObject(t)) throw Error("wrong validation config specified"); return t = e.extend({}, t), e.isFunction(t.validator) ? t : this._applyNamedValidator(t, t.validator) }, _applyNamedValidator: function(t, i) { delete t.validator; var n = r[i]; if (!n) throw Error('unknown validator "' + i + '"'); return e.isFunction(n) && (n = { validator: n }), e.extend({}, n, t) } }, t.Validation = n; var r = { required: { message: "Field is required", validator: function(t) { return null != t && "" !== t } }, rangeLength: { message: "Field value length is out of the defined range", validator: function(t, e, i) { return t.length >= i[0] && t.length <= i[1] } }, minLength: { message: "Field value is too short", validator: function(t, e, i) { return t.length >= i } }, maxLength: { message: "Field value is too long", validator: function(t, e, i) { return t.length <= i } }, pattern: { message: "Field value is not matching the defined pattern", validator: function(t, e, i) { return "string" == typeof i && (i = new RegExp("^(?:" + i + ")$")), i.test(t) } }, range: { message: "Field value is out of the defined range", validator: function(t, e, i) { return t >= i[0] && t <= i[1] } }, min: { message: "Field value is too small", validator: function(t, e, i) { return t >= i } }, max: { message: "Field value is too large", validator: function(t, e, i) { return t <= i } } };
    t.validators = r }(jsGrid, jQuery),
function(t, e, i) {
    function n(t) { e.extend(!0, this, t), this.sortingFunc = this._getSortingFunc() }
    n.prototype = { name: "", title: null, css: "", align: "", width: 100, visible: !0, filtering: !0, inserting: !0, editing: !0, sorting: !0, sorter: "string", headerTemplate: function() { return void 0 === this.title || null === this.title ? this.name : this.title }, itemTemplate: function(t, e) { return t }, filterTemplate: function() { return "" }, insertTemplate: function() { return "" }, editTemplate: function(t, e) { return this._value = t, this.itemTemplate(t, e) }, filterValue: function() { return "" }, insertValue: function() { return "" }, editValue: function() { return this._value }, _getSortingFunc: function() { var i = this.sorter; if (e.isFunction(i)) return i; if ("string" == typeof i) return t.sortStrategies[i]; throw Error('wrong sorter for the field "' + this.name + '"!') } }, t.Field = n }(jsGrid, jQuery),
function(t, e, i) { var n = t.Field;

    function r(t) { n.call(this, t) }
    r.prototype = new n({ autosearch: !0, readOnly: !1, filterTemplate: function() { if (!this.filtering) return ""; var t = this._grid,
                e = this.filterControl = this._createTextBox(); return this.autosearch && e.on("keypress", function(e) { 13 === e.which && (t.search(), e.preventDefault()) }), e }, insertTemplate: function() { return this.inserting ? this.insertControl = this._createTextBox() : "" }, editTemplate: function(t) { if (!this.editing) return this.itemTemplate.apply(this, arguments); var e = this.editControl = this._createTextBox(); return e.val(t), e }, filterValue: function() { return this.filterControl.val() }, insertValue: function() { return this.insertControl.val() }, editValue: function() { return this.editControl.val() }, _createTextBox: function() { return e("<input>").attr("type", "text").prop("readonly", !!this.readOnly) } }), t.fields.text = t.TextField = r }(jsGrid, jQuery),
function(t, e, i) { var n = t.TextField;

    function r(t) { n.call(this, t) }
    r.prototype = new n({ sorter: "number", align: "right", readOnly: !1, filterValue: function() { return this.filterControl.val() ? parseInt(this.filterControl.val() || 0, 10) : void 0 }, insertValue: function() { return this.insertControl.val() ? parseInt(this.insertControl.val() || 0, 10) : void 0 }, editValue: function() { return this.editControl.val() ? parseInt(this.editControl.val() || 0, 10) : void 0 }, _createTextBox: function() { return e("<input>").attr("type", "number").prop("readonly", !!this.readOnly) } }), t.fields.number = t.NumberField = r }(jsGrid, jQuery),
function(t, e, i) { var n = t.TextField;

    function r(t) { n.call(this, t) }
    r.prototype = new n({ insertTemplate: function() { return this.inserting ? this.insertControl = this._createTextArea() : "" }, editTemplate: function(t) { if (!this.editing) return this.itemTemplate.apply(this, arguments); var e = this.editControl = this._createTextArea(); return e.val(t), e }, _createTextArea: function() { return e("<textarea>").prop("readonly", !!this.readOnly) } }), t.fields.textarea = t.TextAreaField = r }(jsGrid, jQuery),
function(t, e, i) { var n = t.NumberField,
        r = "number",
        s = "string";

    function a(t) { if (this.items = [], this.selectedIndex = -1, this.valueField = "", this.textField = "", t.valueField && t.items.length) { var e = t.items[0][t.valueField];
            this.valueType = typeof e === r ? r : s }
        this.sorter = this.valueType, n.call(this, t) }
    a.prototype = new n({ align: "center", valueType: r, itemTemplate: function(t) { var i, n = this.items,
                r = this.valueField,
                s = this.textField;
            i = r ? e.grep(n, function(e, i) { return e[r] === t })[0] || {} : n[t]; var a = s ? i[s] : i; return null == a ? "" : a }, filterTemplate: function() { if (!this.filtering) return ""; var t = this._grid,
                e = this.filterControl = this._createSelect(); return this.autosearch && e.on("change", function(e) { t.search() }), e }, insertTemplate: function() { return this.inserting ? this.insertControl = this._createSelect() : "" }, editTemplate: function(t) { if (!this.editing) return this.itemTemplate.apply(this, arguments); var e = this.editControl = this._createSelect(); return void 0 !== t && e.val(t), e }, filterValue: function() { var t = this.filterControl.val(); return this.valueType === r ? parseInt(t || 0, 10) : t }, insertValue: function() { var t = this.insertControl.val(); return this.valueType === r ? parseInt(t || 0, 10) : t }, editValue: function() { var t = this.editControl.val(); return this.valueType === r ? parseInt(t || 0, 10) : t }, _createSelect: function() { var t = e("<select>"),
                i = this.valueField,
                n = this.textField,
                r = this.selectedIndex; return e.each(this.items, function(s, a) { var o = i ? a[i] : s,
                    l = n ? a[n] : a;
                e("<option>").attr("value", o).text(l).appendTo(t).prop("selected", r === s) }), t.prop("disabled", !!this.readOnly), t } }), t.fields.select = t.SelectField = a }(jsGrid, jQuery),
function(t, e, i) { var n = t.Field;

    function r(t) { n.call(this, t) }
    r.prototype = new n({ sorter: "number", align: "center", autosearch: !0, itemTemplate: function(t) { return this._createCheckbox().prop({ checked: t, disabled: !0 }) }, filterTemplate: function() { if (!this.filtering) return ""; var t = this._grid,
                i = this.filterControl = this._createCheckbox(); return i.prop({ readOnly: !0, indeterminate: !0 }), i.on("click", function() { var t = e(this);
                t.prop("readOnly") ? t.prop({ checked: !1, readOnly: !1 }) : t.prop("checked") || t.prop({ readOnly: !0, indeterminate: !0 }) }), this.autosearch && i.on("click", function() { t.search() }), i }, insertTemplate: function() { return this.inserting ? this.insertControl = this._createCheckbox() : "" }, editTemplate: function(t) { if (!this.editing) return this.itemTemplate.apply(this, arguments); var e = this.editControl = this._createCheckbox(); return e.prop("checked", t), e }, filterValue: function() { return this.filterControl.get(0).indeterminate ? void 0 : this.filterControl.is(":checked") }, insertValue: function() { return this.insertControl.is(":checked") }, editValue: function() { return this.editControl.is(":checked") }, _createCheckbox: function() { return e("<input>").attr("type", "checkbox") } }), t.fields.checkbox = t.CheckboxField = r }(jsGrid, jQuery),
function(t, e, i) { var n = t.Field;

    function r(t) { n.call(this, t), this._configInitialized = !1 }
    r.prototype = new n({ css: "jsgrid-control-field", align: "center", width: 50, filtering: !1, inserting: !1, editing: !1, sorting: !1, buttonClass: "jsgrid-button", modeButtonClass: "jsgrid-mode-button", modeOnButtonClass: "jsgrid-mode-on-button", searchModeButtonClass: "jsgrid-search-mode-button", insertModeButtonClass: "jsgrid-insert-mode-button", editButtonClass: "jsgrid-edit-button", deleteButtonClass: "jsgrid-delete-button", searchButtonClass: "jsgrid-search-button", clearFilterButtonClass: "jsgrid-clear-filter-button", insertButtonClass: "jsgrid-insert-button", updateButtonClass: "jsgrid-update-button", cancelEditButtonClass: "jsgrid-cancel-edit-button", searchModeButtonTooltip: "Switch to searching", insertModeButtonTooltip: "Switch to inserting", editButtonTooltip: "Edit", deleteButtonTooltip: "Delete", searchButtonTooltip: "Search", clearFilterButtonTooltip: "Clear filter", insertButtonTooltip: "Insert", updateButtonTooltip: "Update", cancelEditButtonTooltip: "Cancel edit", editButton: !0, deleteButton: !0, clearFilterButton: !0, modeSwitchButton: !0, _initConfig: function() { this._hasFiltering = this._grid.filtering, this._hasInserting = this._grid.inserting, this._hasInserting && this.modeSwitchButton && (this._grid.inserting = !1), this._configInitialized = !0 }, headerTemplate: function() { this._configInitialized || this._initConfig(); var t = this._hasFiltering,
                e = this._hasInserting; return this.modeSwitchButton && (t || e) ? t && !e ? this._createFilterSwitchButton() : e && !t ? this._createInsertSwitchButton() : this._createModeSwitchButton() : "" }, itemTemplate: function(t, i) { var n = e([]); return this.editButton && (n = n.add(this._createEditButton(i))), this.deleteButton && (n = n.add(this._createDeleteButton(i))), n }, filterTemplate: function() { var t = this._createSearchButton(); return this.clearFilterButton ? t.add(this._createClearFilterButton()) : t }, insertTemplate: function() { return this._createInsertButton() }, editTemplate: function() { return this._createUpdateButton().add(this._createCancelEditButton()) }, _createFilterSwitchButton: function() { return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, !0) }, _createInsertSwitchButton: function() { return this._createOnOffSwitchButton("inserting", this.insertModeButtonClass, !1) }, _createOnOffSwitchButton: function(t, i, n) { var r = n,
                s = e.proxy(function() { a.toggleClass(this.modeOnButtonClass, r) }, this),
                a = this._createGridButton(this.modeButtonClass + " " + i, "", function(e) { r = !r, e.option(t, r), s() }); return s(), a }, _createModeSwitchButton: function() { var t = !1,
                i = e.proxy(function() { n.attr("title", t ? this.searchModeButtonTooltip : this.insertModeButtonTooltip).toggleClass(this.insertModeButtonClass, !t).toggleClass(this.searchModeButtonClass, t) }, this),
                n = this._createGridButton(this.modeButtonClass, "", function(e) { t = !t, e.option("inserting", t), e.option("filtering", !t), i() }); return i(), n }, _createEditButton: function(t) { return this._createGridButton(this.editButtonClass, this.editButtonTooltip, function(e, i) { e.editItem(t), i.stopPropagation() }) }, _createDeleteButton: function(t) { return this._createGridButton(this.deleteButtonClass, this.deleteButtonTooltip, function(e, i) { e.deleteItem(t), i.stopPropagation() }) }, _createSearchButton: function() { return this._createGridButton(this.searchButtonClass, this.searchButtonTooltip, function(t) { t.search() }) }, _createClearFilterButton: function() { return this._createGridButton(this.clearFilterButtonClass, this.clearFilterButtonTooltip, function(t) { t.clearFilter() }) }, _createInsertButton: function() { return this._createGridButton(this.insertButtonClass, this.insertButtonTooltip, function(t) { t.insertItem().done(function() { t.clearInsert() }) }) }, _createUpdateButton: function() { return this._createGridButton(this.updateButtonClass, this.updateButtonTooltip, function(t, e) { t.updateItem(), e.stopPropagation() }) }, _createCancelEditButton: function() { return this._createGridButton(this.cancelEditButtonClass, this.cancelEditButtonTooltip, function(t, e) { t.cancelEdit(), e.stopPropagation() }) }, _createGridButton: function(t, i, n) { var r = this._grid; return e("<input>").addClass(this.buttonClass).addClass(t).attr({ type: "button", title: i }).on("click", function(t) { n(r, t) }) }, editValue: function() { return "" } }), t.fields.control = t.ControlField = r }(jsGrid, jQuery);